
#include <stdio.h> 
#include<pthread.h>
int alloc[5][3];
int max[5][3];
int avail[3];
int x[5][3];
 int n, m, i, j, k; 
 void *calculate1(int (&alloc)[5][3],int(&max)[5][3], int (&avail)[3])
 {
	  	printf("calculate");
	  
	   int f[n], ans[n], ind = 0; 
      for (k = 0; k < n; k++) { 
        f[k] = 0; 
      } 
     int need[n][m]; 
     for (i = 0; i < 5; i++) { 
        for (j = 0; j < 3 ;j++) 
            need[i][j] = max[i][j] - alloc[i][j]; 
           
		}
    
     
    int y = 0; 
    for (k = 0; k < 5; k++) { 
        for (i = 0; i < n; i++) { 
            if (f[i] == 0) { 
  
                int flag = 0; 
                for (j = 0; j < m; j++) { 
                    if (x[i][j] > avail[j]) 
                        flag = 1; 
                    break; 
                } 
  
                if (flag == 0) { 
                    ans[ind++] = i; 
                    for (y = 0; y < m; y++) 
                        avail[y] += alloc[i][y]; 
                    f[i] = 1; 
                } 
            } 
        } 
    } 
  
    printf(" SAFE Sequence\n"); 
    for (i = 0; i < n - 1; i++) 
        printf(" P%d ->", ans[i]); 
    printf(" P%d", ans[n - 1]); 
  
  
          
}   
 
void *func(void *arg)
{
	   
	int 	alloc1[5][3]={{0,1,0},{2,0,0},{3,0,2},{2,1,1},{0,0,2}};
	for( i=0;i<5;i++)

    {
	  for(j=0;j<3;j++)
	  {
	  	alloc[i][j]=alloc1[i][j];
	  }
     }
		 
  
        int  max1[5][3] = { { 7, 5, 3 }, //p0 
                      { 3, 2, 2 }, // P1 
                      { 9, 0, 2 }, // P2 
                      { 2, 2, 2 }, // P3 
                      { 4, 3, 3 } }; // P4 
    for( i=0;i<5;i++)

    {
	  for(j=0;j<3;j++)
	  {
	  	max[i][j]=max1[i][j];
	  }
     }
  
          int avail1[3] = { 3, 3, 2 };
          for(j=0;j<3;j++)
      
      {
      	avail[3]=avail1[3];
	  }
	 
	   calculate1(alloc1, max1,avail);
}


int main() 
{ 
    // P0, P1, P2, P3, P4 are the Process names here 
  
    pthread_t t;
    n = 5; // Number of processes 
    m = 3; // Number of resources 
     // Available Resources 
    pthread_create(&t,NULL,func,NULL);
    pthread_join(t,NULL);
    printf("Resources for the respective processes are allocated\n");
   
    
} 
